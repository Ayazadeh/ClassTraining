export default {

    // loading: "~/components/Loading.vue",

    loading: {
        color: 'grey',
        height: '5px'
    },

    /*router: {
        extendRoutes(routes) {
            routes.push({
                path: "/",
                component: "~/pages/logstash/reports.vue"
            });
        }
    },*/
    /*
    ** Nuxt rendering mode
    ** See https://nuxtjs.org/api/configuration-mode
    */
    //mode: 'spa',
    // ssr: false == mode: 'spa'
    ssr: false, // ssr = server-side rendering
    /*
    ** Nuxt target
    ** See https://nuxtjs.org/api/configuration-target
    */
    target: 'server',

    server: {
        port: 3000,
        host: '0.0.0.0'
    },
    /*
    ** Headers of the page
    ** See https://nuxtjs.org/api/configuration-head
    */
    head: {
        title: process.env.npm_package_name || '',
        meta: [
            {charset: 'utf-8'},
            {name: 'viewport', content: 'width=device-width, initial-scale=1'},
            {hid: 'description', name: 'description', content: process.env.npm_package_description || ''}
        ],
        link: [
            {rel: 'icon', type: 'image/x-icon', href: '/title-colored.png'}
        ],
        script: [
            {src: '/jquery.js'}
        ]
    },
    /*
    ** Global CSS
    */
    css: ["~/assets/scss/app.scss", 'quill/dist/quill.core.css', 'quill/dist/quill.snow.css', 'quill/dist/quill.bubble.css'],
    /*
    ** Plugins to load before mounting the App
    ** https://nuxtjs.org/guide/plugins
    */
    plugins: [
        //"~/plugins/fireauth.js",
        //"~/plugins/fakeauth.js",
        "~/plugins/localstorage.js",
        "~/plugins/vue2-leaflet-markercluster.js",
        "~/plugins/simplebar.js",
        "~/plugins/vue-click-outside.js",
        "~/plugins/vuelidate.js",
        "~/plugins/draggable.js",
        "~/plugins/vue-slidebar.js",
        "~/plugins/tour.js",
        "~/plugins/vue-lightbox.js",
        "~/plugins/mask.js",
        "~/plugins/quill-editor.js",
        "~/plugins/chartist.js",
        "~/plugins/vue-googlemap.js",
        "~/plugins/string-filter.js",
        '~/plugins/axios.js',
        '~/plugins/blockui.js',
        '~/plugins/icons.js',
        '~/plugins/json-editor.js',
        '~/plugins/filters.js',
        {src: '~/plugins/vue-time', ssr: false},
        {src: '~/plugins/chart.js', mode: 'client'},
    ],

    vuetify: {
        theme: {
            dark: true,
            themes: {
                light: {
                    myColor1: '#f6f6f8',
                    myColor2: '#9d9191',
                    myColor3: '#ffffff',
                    myColor4: '#4cbde7',
                    myColor5: '#15b4ee',
                },
                dark: {
                    myColor1: '#001e3c',
                    myColor2: '#01478d',
                    myColor3: '#0a1929',
                    myColor4: '#071a2e',
                    myColor5: '#0d2945',
                    myColor6: '#1f3953',
                    myColor7: '#5286b9'
                },
            },
        },
    },
    /*
    ** Auto import components
    ** See https://nuxtjs.org/api/configuration-components
    */
    components: true,
    /*
    ** Nuxt.js dev-modules
    */
    buildModules: [
        '@nuxtjs/vuetify',
    ],
    /*
    ** Nuxt.js modules
    */
    modules: [
        // Doc: https://bootstrap-vue.js.org
        'bootstrap-vue/nuxt',
        'nuxt-i18n',
        '@nuxtjs/axios',
        '@nuxtjs/auth',
        '@nuxtjs/moment',
        'nuxt-leaflet',
        '@nuxtjs/toast',
    ],
    // toast: {
    //     position: 'top-center',
    //     register: [ // Register custom toasts
    //         {
    //             name: 'my_error',
    //             message: 'با خطا مواجه شد',
    //             options: {
    //                 type: 'error'
    //             }
    //         },
    //         {
    //             name: 'my_success',
    //             message: 'با موفقیت ثبت شد',
    //             options: {
    //                 type: 'success',
    //                 duration: 2000,
    //                 fullWidth: true,
    //                 className: 'bg-dark justify-content-center py-3',
    //             }
    //         }
    //     ]
    // },

    /*moment: {
        locales: ['fa']
    },*/

    i18n: {
        locales: ['en', 'fr', 'es', 'ar', 'fa'],
        defaultLocale: 'fa',
        vueI18n: {
            fallbackLocale: 'en',
            messages: {
                en: require('./locales/en.json'),
                fr: require('./locales/fr.json'),
                es: require('./locales/es.json'),
                ar: require('./locales/ar.json'),
                zh: require('./locales/zh.json'),
                fa: require('./locales/fa.json')
            }
        }
    },

    axios: {
        proxy: false,
        baseURL: process.env.API_SERVER,
        setToken: true,
        debug: true,
        headers: {
            common: {
                'Accept': 'application/json, text/plain, */*',
            },
            delete: {},
            get: {},
            head: {},
            post: {},
            put: {},
            patch: {}
        }
    },
    /*proxy: {
        '/elastic/': {target: process.env.API_URL, changeOrigin: true}, // add changeOrigin
        '/django/': {target: process.env.FORM_URL, changeOrigin: true}  // add changeOrigin
    },*/

    auth: {
        strategies: {
            local: {
                token: {
                    property: 'token',
                    global: true, // optional
                    type: 'Bearer'
                },
                endpoints: {
                    login: {
                        url: '/api/token/',
                        method: 'post',
                        propertyName: 'access',
                    },
                    logout: false,
                    user: false
                },
                tokenType: '',
                tokenName: 'Authorization',
            },
            redirect: {
                login: '/login',
                home: '/',
                logout: '/logout'
            },
        },
    },
    router: {
        middleware: ['auth'],
    },

    /*
    ** Build configuration
    ** See https://nuxtjs.org/api/configuration-build/
    */
    build: {
        babel: {
            compact: true
        }
    },
    env: {
        auth: process.env.VUE_APP_DEFAULT_AUTH,
        apikey: process.env.VUE_APP_APIKEY,
        authdomain: process.env.VUE_APP_AUTHDOMAIN,
        databaseurl: process.env.VUE_APP_DATABASEURL,
        projectid: process.env.VUE_APP_PROJECTId,
        storgebucket: process.env.VUE_APP_STORAGEBUCKET,
        message: process.env.VUE_APP_MESSAGINGSENDERID,
        appid: process.env.VUE_APP_APPId,
        measurement: process.env.VUE_APP_MEASUREMENTID,
    }
}
